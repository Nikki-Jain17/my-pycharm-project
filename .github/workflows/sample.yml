name: End-to-End Test Execution Pipeline

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      flows:
        description: "Select end-to-end flow"
        required: true
        default: "ALL"
        type: choice
        options:
          - ALL
          - sql_to_azure
          - nas_to_azure
          - s3_to_azure
          - sybase_to_azure
          - HDFS_to_Azure
          - REST_API_to_Azure

      component:
        description: "Select components to execute"
        required: false
        default: "none"
        type: choice
        options:
          - none
          - register_virtual_dataset
          - register_physical_dataset
          - register_schema
          - register_task
          - register_task_flows

      priority:
        description: "Select priority level"
        required: false
        default: "none"
        type: choice
        options:
          - none
          - P1
          - P2
          - P3

jobs:
  # Step 1: Test Data Check and Creation
  test_data_generation:
    runs-on: windows-latest
    outputs:
      createTestData: ${{ steps.read-flag.outputs.createTestData }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install YAML Dependencies
        run: pip install pyyaml

      - name: Read createTestData Flag (PowerShell)
        id: read-flag
        shell: pwsh
        run: |
          $jsonContent = python -c "import yaml, json; print(json.dumps(yaml.safe_load(open('config.yaml'))))"
          $config = $jsonContent | ConvertFrom-Json
          echo "createTestData=$($config.createTestData)" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Show Flag Value
        run: echo "createTestData is ${{ env.createTestData }}"

      - name: Install Dependencies
        if: env.createTestData == 'true'
        run: pip install -r requirements.txt

      - name: Run Test Data Generation (If Flag is True)
        if: env.createTestData == 'true'
        working-directory: metadata_driven
        run: python TestDataGenerationViaMetadata.py

      - name: List Generated Files
        run: dir metadata_driven

      - name: Upload Generated Test Data
        uses: actions/upload-artifact@v4
        with:
          name: generated-trade-data
          path: metadata_driven/trade_data_with_line_numbers.csv

  # Step 2: Parent Job - Test Case Execution
  
  workflow_execution:
    needs: test_data_generation
    if: ${{ github.event.inputs.flows == 'ALL' && github.event.inputs.priority == 'none' && github.event.inputs.component == 'none' }}
    runs-on: windows-latest
    strategy:
      matrix:
        flow:
          - sql_to_azure
          - nas_to_azure
          - s3_to_azure
          - sybase_to_azure
          - HDFS_to_Azure
          - REST_API_to_Azure
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Install Pytest and Reporting Plugin
        run: pip install pytest pytest-html

      - name: Run Pytest for ${{ matrix.flow }}
        run: pytest tests/test_${{ matrix.flow }}.py --html=reports/${{ matrix.flow }}_report.html --self-contained-html

      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.flow }}_report
          path: reports/${{ matrix.flow }}_report.html

  end_to_end_workflow_execution:
      needs: test_data_generation
      if: ${{ github.event.inputs.flows != 'ALL' && github.event.inputs.flows != '' && github.event.inputs.flows != null}}
      runs-on: windows-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v3

        - name: Install Dependencies
          run: pip install -r requirements.txt

        - name: Install Pytest and Reporting Plugin
          run: pip install pytest pytest-html

        - name: Run selected end-to-end flow
          run: pytest tests/test_${{ github.event.inputs.flows }}.py --html=reports/${{ github.event.inputs.flows }}_report.html --self-contained-html

  independent_component_execution:
      needs: test_data_generation
      if: ${{ github.event.inputs.component != 'none' && github.event.inputs.flows != 'ALL' }}
      runs-on: windows-latest
      strategy:
        matrix:
          component: [ register_virtual_dataset, register_physical_dataset,register_schema, register_task, register_task_flows ]
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v3

        - name: Install Dependencies
          run: pip install -r requirements.txt

        - name: Install Pytest and Reporting Plugin
          run: pip install pytest pytest-html

        - name: Run Component ${{ matrix.component }}
          if: ${{ github.event.inputs.component == matrix.component }}
          run: pytest tests/test_${{ github.event.inputs.flows }}.py -m ${{ matrix.component }} --html=reports/${{ github.event.inputs.flows }}_${{ matrix.component }}.html --self-contained-html

        - name: Upload Component Report
          if: ${{ github.event.inputs.component == matrix.component }}
          uses: actions/upload-artifact@v4
          with:
            name: ${{ github.event.inputs.flows }}_${{ matrix.component }}_report
            path: reports/${{ github.event.inputs.flows }}_${{ matrix.component }}.html


  priority_test_case_execution:
    needs: test_data_generation
    if: ${{ github.event.inputs.priority != 'none' }}
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - flow: sql_to_azure
            priority: P1
          - flow: nas_to_azure
            priority: P1
          - flow: s3_to_azure
            priority: P2
          - flow: sybase_to_azure
            priority: P2
          - flow: HDFS_to_Azure
            priority: P1
          - flow: REST_API_to_Azure
            priority: P1
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Install Pytest and Reporting Plugin
        run: pip install pytest pytest-html

      - name: Run Priority Test for ${{ matrix.flow }} - ${{ matrix.priority }}
        if: ${{ github.event.inputs.priority == matrix.priority }}
        run: pytest tests/test_${{ matrix.flow }}.py -m "${{ matrix.priority }}" --html=reports/${{ matrix.flow }}_${{ matrix.priority }}.html --self-contained-html

      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.flow }}_${{ matrix.priority }}_report
          path: reports/${{ matrix.flow }}_${{ matrix.priority }}.html


  # Step 3: Data Reconciliation
  dataReconciliation:
    needs:
      - workflow_execution
      - end_to_end_workflow_execution
      - independent_component_execution
      - priority_test_case_execution
    if: |
      always() &&
      (
        needs.workflow_execution.result == 'success' ||
        needs.end_to_end_workflow_execution.result == 'success' ||
        needs.independent_component_execution.result == 'success' ||
        needs.priority_test_case_execution.result == 'success'
      )
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Run Data Reconciliatio
        run: echo "Tests completed. You can add real data reconciliation logic here."

  # Step 4: Final Reporting
  reporting:
    needs: dataReconciliation
    if: always()  # <-- This is crucial
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download All Uploaded Reports
        uses: actions/download-artifact@v4
        with:
          path: downloaded-reports

      - name: List Downloaded Reports
        run: |
          echo "Downloaded Reports:"
          dir downloaded-reports /s

      - name: Upload Final Report Folder
        uses: actions/upload-artifact@v4
        with:
          name: Final_Test_Reports
          path: downloaded-reports
 






